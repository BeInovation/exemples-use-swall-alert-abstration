export type PopoverPlacement = 'top' | 'bottom' | 'left' | 'right';

export const getAnchorOrigin = (placement: PopoverPlacement) => {
  const config = {
    top: { vertical: 'top' as const, horizontal: 'center' as const },
    bottom: { vertical: 'bottom' as const, horizontal: 'center' as const },
    left: { vertical: 'center' as const, horizontal: 'left' as const },
    right: { vertical: 'center' as const, horizontal: 'right' as const },
  };
  return config[placement];
};

export const getTransformOrigin = (placement: PopoverPlacement) => {
  const config = {
    top: { vertical: 'bottom' as const, horizontal: 'center' as const },
    bottom: { vertical: 'top' as const, horizontal: 'center' as const },
    left: { vertical: 'center' as const, horizontal: 'right' as const },
    right: { vertical: 'center' as const, horizontal: 'left' as const },
  };
  return config[placement];
};


import {
  Info as InfoIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  CheckCircle as SuccessIcon,
  Dangerous as DangerIcon,
} from '@mui/icons-material';

export type PopoverType = 'info' | 'warning' | 'error' | 'success' | 'danger';

export const typeConfig = {
  info: {
    icon: InfoIcon,
    iconColor: '#2196F3',
    backgroundColor: '#E3F2FD',
    borderColor: '#BBDEFB',
  },
  warning: {
    icon: WarningIcon,
    iconColor: '#FF9800',
    backgroundColor: '#FFF3E0',
    borderColor: '#FFCC80',
  },
  error: {
    icon: ErrorIcon,
    iconColor: '#F44336',
    backgroundColor: '#FFEBEE',
    borderColor: '#FFCDD2',
  },
  success: {
    icon: SuccessIcon,
    iconColor: '#4CAF50',
    backgroundColor: '#E8F5E8',
    borderColor: '#C8E6C9',
  },
  danger: {
    icon: DangerIcon,
    iconColor: '#D32F2F',
    backgroundColor: '#FFEBEE',
    borderColor: '#FFCDD2',
  },
};

import React, { useState, ReactElement, cloneElement } from 'react';
import { Popover, Paper, Typography, Box } from '@mui/material';
import { PopoverType, typeConfig } from './typeConfig';
import { PopoverPlacement, getAnchorOrigin, getTransformOrigin } from './positioning';

interface CustomPopoverProps {
  children: ReactElement;
  title: string;
  text: string;
  type?: PopoverType;
  placement?: PopoverPlacement;
  disabled?: boolean;
}

const CustomPopover: React.FC<CustomPopoverProps> = ({
  children,
  title,
  text,
  type = 'info',
  placement = 'top',
  disabled = false,
}) => {
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [isOpen, setIsOpen] = useState(false);

  const config = typeConfig[type];
  const IconComponent = config.icon;

  const handleMouseEnter = (event: React.MouseEvent<HTMLElement>) => {
    if (!disabled) {
      setAnchorEl(event.currentTarget);
      setIsOpen(true);
    }
  };

  const handleMouseLeave = () => {
    setIsOpen(false);
    setAnchorEl(null);
  };

  const childWithHandlers = cloneElement(children, {
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ...children.props,
  });

  return (
    <>
      {childWithHandlers}
      <Popover
        open={isOpen}
        anchorEl={anchorEl}
        onClose={handleMouseLeave}
        anchorOrigin={getAnchorOrigin(placement)}
        transformOrigin={getTransformOrigin(placement)}
        disableRestoreFocus
        sx={{
          pointerEvents: 'none',
          '& .MuiPopover-paper': {
            pointerEvents: 'auto',
          },
        }}
        PaperProps={{
          onMouseEnter: () => setIsOpen(true),
          onMouseLeave: handleMouseLeave,
        }}
      >
        <Paper
          elevation={3}
          sx={{
            p: 2,
            maxWidth: 320,
            backgroundColor: config.backgroundColor,
            border: `1px solid ${config.borderColor}`,
            borderRadius: 2,
          }}
        >
          <Box
            sx={{
              display: 'flex',
              alignItems: 'flex-start',
              gap: 1.5,
            }}
          >
            <IconComponent
              sx={{
                color: config.iconColor,
                fontSize: 24,
                mt: 0.25,
                flexShrink: 0,
              }}
            />
            <Box sx={{ flex: 1 }}>
              <Typography
                variant="subtitle2"
                sx={{
                  fontWeight: 600,
                  color: 'text.primary',
                  mb: 0.5,
                  lineHeight: 1.3,
                }}
              >
                {title}
              </Typography>
              <Typography
                variant="body2"
                sx={{
                  color: 'text.secondary',
                  lineHeight: 1.4,
                }}
              >
                {text}
              </Typography>
            </Box>
          </Box>
        </Paper>
      </Popover>
    </>
  );
};

export default CustomPopover;
export type { PopoverType, PopoverPlacement };
