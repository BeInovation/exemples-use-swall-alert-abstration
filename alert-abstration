// utils/popoverHelpers.ts

// Types para melhor tipagem
interface LoadingOrder {
  current_status: string;
  reason?: string | string[];
  // outras propriedades do loadingOrder
}

export const shouldShowPopover = (loadingOrder: LoadingOrder): boolean => {
  const status = loadingOrder.current_status;
  return status === 'is_canceled' || status === 'is_reject';
};

export const getPopoverType = (loadingOrder: LoadingOrder): 'error' | 'warning' => {
  const status = loadingOrder.current_status;
  return status === 'is_canceled' ? 'error' : 'warning';
};

export const getPopoverTitle = (loadingOrder: LoadingOrder): string => {
  const status = loadingOrder.current_status;
  
  const titleMap = {
    is_canceled: 'OC Cancelada',
    is_reject: 'OC com Pendência de Documentos'
  };
  
  return titleMap[status as keyof typeof titleMap] || 'Status da OC';
};

export const getPopoverText = (loadingOrder: LoadingOrder): string => {
  const reasons = loadingOrder.reason;
  
  // Se não há reasons, retorna mensagem padrão
  if (!reasons) {
    return 'Nenhum motivo especificado.';
  }
  
  // Se reason é string, retorna direto
  if (typeof reasons === 'string') {
    return reasons;
  }
  
  // Se reason é array, concatena com quebras de linha ou separadores
  if (Array.isArray(reasons)) {
    return reasons
      .filter(reason => reason && reason.trim()) // Remove vazios
      .map((reason, index) => `${index + 1}. ${reason}`) // Numera os itens
      .join('\n'); // Junta com quebra de linha
  }
  
  return 'Motivo não disponível.';
};

// Função helper para extrair todos os dados de uma vez
export const getPopoverData = (loadingOrder: LoadingOrder) => {
  return {
    shouldShow: shouldShowPopover(loadingOrder),
    type: getPopoverType(loadingOrder),
    title: getPopoverTitle(loadingOrder),
    text: getPopoverText(loadingOrder)
  };
};
