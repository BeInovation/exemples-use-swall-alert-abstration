// components/StatusColumn.tsx
import React from 'react';
import { AppPopover } from './AppPopover';
import { shouldShowPopover, getPopoverType, getPopoverContent } from '../utils/popoverHelpers';

interface StatusColumnProps {
  status: string;
  children: React.ReactNode;
  placement?: 'top' | 'bottom' | 'left' | 'right';
  size?: 'small' | 'large';
}

export const StatusColumn: React.FC<StatusColumnProps> = ({ 
  status, 
  children, 
  placement = 'top',
  size = 'small'
}) => {
  const showPopover = shouldShowPopover(status);
  
  if (!showPopover) {
    return <>{children}</>;
  }
  
  const popoverType = getPopoverType(status);
  const popoverContent = getPopoverContent(status);
  
  return (
    <AppPopover
      type={popoverType}
      title={popoverContent?.title}
      text={popoverContent?.text}
      placement={placement}
      size={size}
    >
      {children}
    </AppPopover>
  );
};

// utils/popoverHelpers.ts

export const shouldShowPopover = (status: string): boolean => {
  return status === 'is_canceled' || status === 'is_reject';
};

export const getPopoverType = (status: string): 'error' | 'warning' => {
  return status === 'is_canceled' ? 'error' : 'warning';
};

export const getPopoverContent = (status: string) => {
  const contentMap = {
    is_canceled: {
      title: 'Cancelado',
      text: 'Este item foi cancelado e não pode ser processado.'
    },
    is_reject: {
      title: 'Rejeitado',
      text: 'Este item foi rejeitado e precisa de revisão.'
    }
  };
  
  return contentMap[status as keyof typeof contentMap];
};

renderCell: (params: any) => {
  const status = params.row.status;
  
  return (
    <StatusColumn 
      status={status} 
      placement="right"
      size="small" // ou "large" se precisar de mais info
    >
      <StatusChip status={status} />
    </StatusColumn>
  );
}
