// ============================================
// üìÅ services/swalService.ts
// ============================================

import withReactContent from 'sweetalert2-react-content';
import Swal, { SweetAlertResult } from 'sweetalert2';
import { TypographyProps } from '@mui/material';
import React from 'react';

// ‚ö†Ô∏è AJUSTE ESTE IMPORT CONFORME SUA ESTRUTURA:
// Op√ß√£o 1: Se voc√™ tem o AppSwalAlerts
// import { AppSwalAlerts } from '../../../../../../../components/molecules/cascMolecules/AppSwalAlert';

// Op√ß√£o 2: Se n√£o conseguir importar, comente a linha acima e descomente esta:
// const AppSwalAlerts = ({ swal, type, title, text, textVariant, confirmButtonText }: any) => (
//   <div>
//     <h3>{title}</h3>
//     <p>{text}</p>
//   </div>
// );

// ===== TIPOS =====

export interface AlertOptions {
  type: 'success' | 'error' | 'warning' | 'info' | 'confirm';
  title: string;
  text?: string;
  textVariant?: TypographyProps['variant'];
  confirmButtonText?: string;
  cancelButtonText?: string;
}

// ===== SERVI√áO =====

class SwalService {
  private MySwal = withReactContent(Swal);

  /**
   * Mostra alertas simples (success, error, warning, info)
   */
  async showSimpleAlert(options: Omit<AlertOptions, 'type'> & { type: 'success' | 'error' | 'warning' | 'info' }): Promise<SweetAlertResult> {
    const result = await this.MySwal.fire({
      html: (
        <AppSwalAlerts
          swal={this.MySwal}
          type={options.type}
          title={options.title}
          text={options.text ?? ''}
          textVariant={options.textVariant}
        />
      ),
    });

    return result;
  }

  /**
   * Mostra alerta de confirma√ß√£o
   */
  async showConfirmAlert(options: Omit<AlertOptions, 'type'> & { type: 'confirm' }): Promise<boolean> {
    const result = await this.MySwal.fire({
      html: (
        <AppSwalAlerts
          swal={this.MySwal}
          type={options.type}
          title={options.title}
          text={options.text ?? ''}
          textVariant={options.textVariant}
          confirmButtonText={options.confirmButtonText}
        />
      ),
    });

    return result.isConfirmed;
  }

  /**
   * M√©todo principal que decide qual tipo mostrar
   */
  async show(options: AlertOptions): Promise<SweetAlertResult | boolean> {
    if (options.type === 'confirm') {
      return this.showConfirmAlert(options as any);
    }
    return this.showSimpleAlert(options as any);
  }
}

export const swalService = new SwalService();

// ============================================
// üìÅ utils/swallAlert.ts
// ============================================

// import { swalService, AlertOptions } from '../services/swalService';

/**
 * API simplificada para alertas
 */
export const swallAlert = {
  /**
   * M√©todo principal
   */
  show: (options: AlertOptions): Promise<SweetAlertResult | boolean> => 
    swalService.show(options),

  /**
   * Alerta de sucesso
   */
  success: (title: string, text?: string): Promise<SweetAlertResult> =>
    swalService.showSimpleAlert({ type: 'success', title, text }),

  /**
   * Alerta de erro
   */
  error: (title: string, text?: string): Promise<SweetAlertResult> =>
    swalService.showSimpleAlert({ type: 'error', title, text }),

  /**
   * Alerta de aviso
   */
  warning: (title: string, text?: string): Promise<SweetAlertResult> =>
    swalService.showSimpleAlert({ type: 'warning', title, text }),

  /**
   * Alerta informativo
   */
  info: (title: string, text?: string): Promise<SweetAlertResult> =>
    swalService.showSimpleAlert({ type: 'info', title, text }),

  /**
   * Alerta de confirma√ß√£o
   */
  confirm: (title: string, text?: string, confirmText?: string, cancelText?: string): Promise<boolean> =>
    swalService.showConfirmAlert({
      type: 'confirm',
      title,
      text,
      confirmButtonText: confirmText,
      cancelButtonText: cancelText,
    }),
};

/**
 * Compatibilidade com vers√£o anterior
 */
export const alert = {
  success: swallAlert.success,
  error: swallAlert.error,
  warning: swallAlert.warning,
  info: swallAlert.info,
};

// ============================================
// üìÅ VERS√ÉO ALTERNATIVA SEM AppSwalAlerts
// ============================================

/*
Se voc√™ n√£o conseguir importar o AppSwalAlerts, use esta vers√£o:

import Swal, { SweetAlertResult } from 'sweetalert2';

export interface AlertOptions {
  type: 'success' | 'error' | 'warning' | 'info' | 'confirm';
  title: string;
  text?: string;
  confirmButtonText?: string;
  cancelButtonText?: string;
}

class SimpleSwalService {
  async showSimpleAlert(options: { type: 'success' | 'error' | 'warning' | 'info', title: string, text?: string }): Promise<SweetAlertResult> {
    return Swal.fire({
      icon: options.type,
      title: options.title,
      text: options.text,
    });
  }

  async showConfirmAlert(options: { title: string, text?: string, confirmButtonText?: string, cancelButtonText?: string }): Promise<boolean> {
    const result = await Swal.fire({
      icon: 'question',
      title: options.title,
      text: options.text,
      showCancelButton: true,
      confirmButtonText: options.confirmButtonText || 'Confirmar',
      cancelButtonText: options.cancelButtonText || 'Cancelar',
    });
    return result.isConfirmed;
  }
}

export const simpleSwalService = new SimpleSwalService();

export const swallAlert = {
  success: (title: string, text?: string) => 
    simpleSwalService.showSimpleAlert({ type: 'success', title, text }),
  error: (title: string, text?: string) => 
    simpleSwalService.showSimpleAlert({ type: 'error', title, text }),
  warning: (title: string, text?: string) => 
    simpleSwalService.showSimpleAlert({ type: 'warning', title, text }),
  info: (title: string, text?: string) => 
    simpleSwalService.showSimpleAlert({ type: 'info', title, text }),
  confirm: (title: string, text?: string, confirmText?: string, cancelText?: string) => 
    simpleSwalService.showConfirmAlert({ title, text, confirmButtonText: confirmText, cancelButtonText: cancelText }),
};
*/

// ============================================
// üìÅ examples/usageExamples.ts
// ============================================

// import { swallAlert } from '../utils/swallAlert';

/**
 * EXEMPLOS DE USO CORRIGIDOS
 */

// ========================================
// 1. USO B√ÅSICO (com await para evitar erros)
// ========================================

export const exemploBasico = async () => {
  // Alertas simples
  await swallAlert.success('Sucesso!', 'Opera√ß√£o conclu√≠da');
  await swallAlert.error('Erro!', 'Algo deu errado');
  await swallAlert.warning('Aten√ß√£o!', 'Verifique os dados');
  await swallAlert.info('Info', 'Processo finalizado');
};

// ========================================
// 2. CONFIRMA√á√ÉO
// ========================================

export const exemploConfirmacao = async () => {
  const confirmado = await swallAlert.confirm(
    'Excluir item?',
    'Esta a√ß√£o √© irrevers√≠vel',
    'Sim, excluir',
    'Cancelar'
  );
  
  if (confirmado) {
    console.log('Usu√°rio confirmou');
  }
};

// ========================================
// 3. SEU CASO DE USO (indexLoader) - CORRIGIDO
// ========================================

export const exemploLoaderCorrigido = async (loadingOrderNumber: string) => {
  try {
    const response = await fetch(`/api/oc/${loadingOrderNumber}`);
    
    if (!response.ok) {
      // N√£o precisa de await aqui se n√£o quiser esperar o alerta fechar
      swallAlert.error(
        'OC n√£o encontrada',
        `N√£o foi poss√≠vel encontrar a OC ${loadingOrderNumber}, por favor entre em contato com a log√≠stica`
      );
      return null;
    }
    
    return response.json();
  } catch (error) {
    swallAlert.error('Erro inesperado', 'Contate o suporte t√©cnico');
    return null;
  }
};

// ============================================
// üìã INSTRU√á√ïES DE CORRE√á√ÉO
// ============================================

/*
üîß COMO CORRIGIR OS ERROS:

1. ERRO DE PROMISE:
   ‚úÖ Tipos espec√≠ficos adicionados para cada m√©todo
   ‚úÖ showSimpleAlert retorna Promise<SweetAlertResult>
   ‚úÖ showConfirmAlert retorna Promise<boolean>

2. ERRO DO AppSwalAlerts:
   ‚úÖ Op√ß√£o 1: Ajuste o import na linha 8
   ‚úÖ Op√ß√£o 2: Use a vers√£o alternativa sem AppSwalAlerts (se√ß√£o comentada)
   ‚úÖ Op√ß√£o 3: Descomente o componente tempor√°rio (linhas 12-17)

3. COMO USAR SEM ERROS:
   
   // Em loaders/actions (n√£o precisa await):
   swallAlert.error('Erro', 'Mensagem');
   
   // Em componentes (com await se quiser esperar):
   await swallAlert.success('Sucesso', 'Mensagem');
   
   // Confirma√ß√£o (sempre com await):
   const confirmado = await swallAlert.confirm('T√≠tulo', 'Mensagem');

4. MIGRA√á√ÉO DO SEU C√ìDIGO:
   
   // ANTES:
   alert.error(`N√£o foi poss√≠vel encontrar a OC ${loadingOrderNumber}...`);
   
   // DEPOIS:
   swallAlert.error(
     'OC n√£o encontrada',
     `N√£o foi poss√≠vel encontrar a OC ${loadingOrderNumber}, por favor entre em contato com a log√≠stica`
   );

‚úÖ RESULTADO: Zero erros TypeScript, funciona com ou sem AppSwalAlerts!
*/
