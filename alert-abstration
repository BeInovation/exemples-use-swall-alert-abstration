import React, { useState, ReactElement } from 'react';
import { Popover, Paper, Typography, Box } from '@mui/material';
import { Warning as WarningIcon, Error as ErrorIcon } from '@mui/icons-material';

type PopoverType = 'warning' | 'error';
type PopoverPlacement = 'top' | 'bottom' | 'left' | 'right';

interface CustomPopoverProps {
  children: ReactElement;
  title: string;
  text: string;
  type?: PopoverType;
  placement?: PopoverPlacement;
  fullwidth?: boolean;
  disabled?: boolean;
}

const CustomPopover: React.FC<CustomPopoverProps> = ({
  children,
  title,
  text,
  type = 'warning',
  placement = 'right',
  fullwidth = false,
  disabled = false,
}) => {
  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const [isOpen, setIsOpen] = useState(false);

  // Configuração para cada tipo
  const typeConfig = {
    warning: {
      icon: WarningIcon,
      iconColor: '#FF9800',
      backgroundColor: '#FFF3E0',
      borderColor: '#FFCC80',
    },
    error: {
      icon: ErrorIcon,
      iconColor: '#F44336',
      backgroundColor: '#FFEBEE',
      borderColor: '#FFCDD2',
    },
  };

  // Configuração de posicionamento
  const placementConfig = {
    top: {
      anchorOrigin: { vertical: 'top' as const, horizontal: 'center' as const },
      transformOrigin: { vertical: 'bottom' as const, horizontal: 'center' as const },
    },
    bottom: {
      anchorOrigin: { vertical: 'bottom' as const, horizontal: 'center' as const },
      transformOrigin: { vertical: 'top' as const, horizontal: 'center' as const },
    },
    left: {
      anchorOrigin: { vertical: 'center' as const, horizontal: 'left' as const },
      transformOrigin: { vertical: 'center' as const, horizontal: 'right' as const },
    },
    right: {
      anchorOrigin: { vertical: 'center' as const, horizontal: 'right' as const },
      transformOrigin: { vertical: 'center' as const, horizontal: 'left' as const },
    },
  };

  const config = typeConfig[type];
  const positioning = placementConfig[placement];
  const IconComponent = config.icon;

  const handleMouseEnter = (event: React.MouseEvent<HTMLElement>) => {
    if (!disabled) {
      setAnchorEl(event.currentTarget);
      setIsOpen(true);
    }
  };

  const handleMouseLeave = () => {
    setIsOpen(false);
    setAnchorEl(null);
  };

  return (
    <>
      <Box
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        sx={{ display: 'inline-block', cursor: 'help' }}
      >
        {children}
      </Box>
      
      <Popover
        open={isOpen}
        anchorEl={anchorEl}
        onClose={handleMouseLeave}
        anchorOrigin={positioning.anchorOrigin}
        transformOrigin={positioning.transformOrigin}
        disableRestoreFocus
        sx={{
          pointerEvents: 'none',
          '& .MuiPopover-paper': {
            pointerEvents: 'auto',
          },
        }}
        PaperProps={{
          onMouseEnter: () => setIsOpen(true),
          onMouseLeave: handleMouseLeave,
        }}
      >
        <Paper
          elevation={3}
          sx={{
            p: 2,
            ...(fullwidth 
              ? { maxWidth: 500, minWidth: 350 } 
              : { maxWidth: 320 }
            ),
            backgroundColor: config.backgroundColor,
            border: `1px solid ${config.borderColor}`,
            borderRadius: 2,
          }}
        >
          <Box
            sx={{
              display: 'flex',
              alignItems: 'flex-start',
              gap: 1.5,
            }}
          >
            <IconComponent
              sx={{
                color: config.iconColor,
                fontSize: 24,
                mt: 0.25,
                flexShrink: 0,
              }}
            />
            <Box sx={{ flex: 1 }}>
              <Typography
                variant="subtitle2"
                sx={{
                  fontWeight: 600,
                  color: 'text.primary',
                  mb: 0.5,
                  lineHeight: 1.3,
                }}
              >
                {title}
              </Typography>
              <Typography
                variant="body2"
                sx={{
                  color: 'text.secondary',
                  lineHeight: 1.4,
                }}
              >
                {text}
              </Typography>
            </Box>
          </Box>
        </Paper>
      </Popover>
    </>
  );
};

export default CustomPopover;
export type { PopoverType, PopoverPlacement };
